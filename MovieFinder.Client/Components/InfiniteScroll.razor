@inject IJSRuntime JS
@implements IDisposable
@typeparam TItem

@ChildContent(Items)

@code {
	[Parameter] public Func<int, Task<IEnumerable<TItem>>> LoadData { get; set; }
	[Parameter] public RenderFragment<IEnumerable<TItem>> ChildContent { get; set; }
	[Parameter] public int MaxPages { get; set; } = 500;

	private List<TItem> Items = new();
	private HashSet<string> _itemKeys = new(); // track unique items to avoid duplicates
	private int _currentPage = 0;
	private bool _isLoading = false;

	private DotNetObjectReference<InfiniteScroll<TItem>> _dotNetRef;

	protected override async Task OnInitializedAsync()
	{
		_dotNetRef = DotNetObjectReference.Create(this);
		await JS.InvokeVoidAsync("scrollHelper.registerScroll", _dotNetRef);
		await LoadMoreAsync();
	}

	//Loads more data
	private async Task LoadMoreAsync()
	{
		if (_isLoading || _currentPage >= MaxPages) return;

		_isLoading = true;
		_currentPage++;

		var newItems = await LoadData(_currentPage);

		if (newItems != null)
		{
			// Deduplicate by a stable key (fallback: object hash)
			var uniqueNewItems = newItems
				.Where(item => _itemKeys.Add(GetItemKey(item)))
				.ToList();

			if (uniqueNewItems.Count > 0)
			{
				Items.AddRange(uniqueNewItems);
				StateHasChanged();
			}
		}

		_isLoading = false;
	}

	// Resolve a unique key for each item
	private string GetItemKey(TItem item)
	{
		// If Movie has Id property, use it
		var idProp = typeof(TItem).GetProperty("Id");
		if (idProp != null)
		{
			var idVal = idProp.GetValue(item);
			return idVal?.ToString() ?? item.GetHashCode().ToString();
		}

		// Fallback to hashcode if no Id property exists
		return item.GetHashCode().ToString();
	}

	//Resets the loaded items and current page, then loads the first page of data async
	public async Task ResetAsync()
	{
		Items.Clear();
		_currentPage = 0;
		await LoadMoreAsync();
	}

	//Cleans up resources by removing js scroll even listener and disposes the .NET object reference to prevent memory leaks
	public void Dispose()
	{
		JS.InvokeVoidAsync("scrollHelper.removeScroll");
		_dotNetRef?.Dispose();
	}

	//Invoked by JS when the users scrolls near bottom. Loads next page of items async
	[JSInvokable]
	public async Task OnScrollNearBottom()
	{
		await LoadMoreAsync();
	}
}
