@using Services
@using Models
@using MudBlazor.Services
@inject ITMDBService TMDB
@page "/movie/{id:int}/{slug}"

<PageTitle>@_movie.Title</PageTitle>

<div class="d-flex justify-center backdrop-image"
	 style=@($"background-image: url('{GetBackdropUrl(_movie.BackdropPath)}');")>
	<MudPaper Style="min-height: 100vh;"
			  Class="mt-8 mb-1 frosted-glass container-width">
		<MudGrid Spacing="0">
			<MudItem xs="12" md="5" lg="3">
				<div class="mt-6 mx-8 center-xs">
					<MudImage Class="movie-page-poster rounded" Src="@GetPosterUrl(_movie.PosterPath)"
							  Alt="Movie Poster"
							  FallbackSrc="/Images/notfound.png" />
				</div>
			</MudItem>
			<MudItem Class="center-xs" xs="12" md="7" lg="9">
				<MudStack Class="center-xs mt-6 mx-2" Style="color: rgba(0,0,0,0.85);">
					<MudText Typo="Typo.h4">@(_movie.Title?.ToUpper())</MudText>
					<MudText Typo="Typo.h5">@_movie.Tagline</MudText>
					<MudText Class="description-width-xs" Typo="Typo.body1">@_movie.Description</MudText>
				</MudStack>
				<MudStack Row="true"
						  Wrap="Wrap.Wrap">
					@foreach (var genre in _movie.Genres)
					{
						<MudChip Class="my-2 mx-2 border-double" T="string" Style=@($"background-color: {GetRandomColor()}CC;")>@genre.Name</MudChip>
					}
				</MudStack>

				<MudStack AlignItems="AlignItems.Center"
						  Row="true"
						  Wrap="Wrap.Wrap"
						  Class="mx-2 justify-xs-center justify-md-start">
					@foreach (var company in _movie.ProductionCompanies)
					{
						<MudTooltip Arrow="true"
									Text="@company.Name">
							@if (GetLogoUrl(company.LogoPath) == "")
							{
								<MudChip Label="true" T="string" Style="background-color: #2b2b2b">
									@company.Name
								</MudChip>
							}
							else
							{
								<MudImage Style="color: rgba(0,0,0,65)"
										  ObjectFit="ObjectFit.Contain"
										  Width="100"
										  Height="60"
										  Class="mt-2"
										  Src="@GetLogoUrl(company.LogoPath)">
								</MudImage>
							}
						</MudTooltip>
					}
				</MudStack>

				<div class="color-wrapper small-font-xs">
					<MudStack Spacing="6"
							  Row="true"
							  Class="justify-md-space-between justify-xs-space-around mt-4 ">
						<MudStack Row="false" Spacing="0" Class="flex-equal">
							<MudText Typo="Typo.h5"><b>Release date</b></MudText>
							<MudText Typo="Typo.h5">@_movie.ReleaseDate</MudText>
						</MudStack>

						<MudStack Row="false" Spacing="0" Class="flex-equal">
							<MudText Typo="Typo.h5"><b>Revenue</b></MudText>

							@if (_movie.Revenue == 0)
							{
								<MudText Typo="Typo.h5">Unknown</MudText>
							}
							else
							{
								<MudText Typo="Typo.h5">$@_movie.Revenue.ToString("##,##")</MudText>
							}
						</MudStack>

						<MudStack Row="false" Spacing="0" Class="flex-equal">
							<MudText Typo="Typo.h5"><b>Budget</b></MudText>

							@if (_movie.Budget == 0)
							{
								<MudText Typo="Typo.h5">Unknown</MudText>
							}
							else
							{
								<MudText Typo="Typo.h5">$@_movie.Budget.ToString("##,##")</MudText>
							}
						</MudStack>
					</MudStack>

					<MudStack Spacing="6"
							  Class="justify-md-space-between justify-xs-space-around mt-8"
							  Row="true">

						<MudStack Row="false" Spacing="0" Class="flex-equal">
							<MudText Typo="Typo.h5"><b>Runtime</b></MudText>
							<MudText Typo="Typo.h5">@_movie.Runtime minutes</MudText>
						</MudStack>

						<MudStack Row="false" Spacing="0" Class="flex-equal">
							<MudText Typo="Typo.h5"><b>Vote average</b></MudText>
							<MudText Typo="Typo.h5">@_movie.Rating.ToString("0.#") / 10</MudText>
						</MudStack>

						<MudStack Row="false" Spacing="0" Class="flex-equal">
							<MudText Typo="Typo.h5"><b>Languages</b></MudText>
							<MudText Typo="Typo.h5">
								@String.Join(", ", _movie.Languages.Select(l => l.Language))
							</MudText>
						</MudStack>

					</MudStack>
				</div>
			</MudItem>
		</MudGrid>
	</MudPaper>
</div>

@code {
	[Parameter]
	public int Id { get; set; }
	[Parameter]
	public string Slug { get; set; }
	private List<string> allLanguages = new List<string>();

	private MovieDetail _movie = new MovieDetail
	{
		Genres = new List<Genre>(),
		ProductionCompanies = new List<ProductionCompany>(),
		Languages = new List<AvailableLanguage>()
	};

	private Actor _actors = new Actor
	{
		MovieCast = new List<Cast>()
	};

	protected override async Task OnParametersSetAsync()
	{
		_movie = await TMDB.GetMovieDetailsAsync(Id);
		_actors = await TMDB.GetActorsAsync(Id);
	}

	private string GetLogoUrl(string logoPath)
	{
		return string.IsNullOrWhiteSpace(logoPath)
		? ""
		: $"https://image.tmdb.org/t/p/original/{logoPath}";
	}

	private string GetPosterUrl(string posterPath)
	{
		return string.IsNullOrWhiteSpace(posterPath)
		? ""
		: $"https://image.tmdb.org/t/p/original{posterPath}";
	}

	private string GetBackdropUrl(string backdropPath)
	{
		return string.IsNullOrWhiteSpace(backdropPath)
		? ""
		: $"https://image.tmdb.org/t/p/original{backdropPath}";
	}

	private Random _random = new Random();

	private readonly string[] colors = {
		"#B22222", "#228B22", "#1E90FF", "#8B008B", "#A0522D",
		"#8B0000", "#2F4F4F", "#556B2F", "#483D8B", "#5F9EA0",
		"#9932CC", "#800000", "#6A5ACD", "#2E8B57","#3CB371",
		"#7B68EE", "#DC143C"
	};

	private string GetRandomColor()
	{
		return colors[_random.Next(colors.Count())];
	}
}
