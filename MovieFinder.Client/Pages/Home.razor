@using Services
@using Models
@using ChoosableOptions
@inject ITMDBService TMDB
@inject ISnackbar Snackbar
@page "/"

<PageTitle>Home</PageTitle>

<MudPaper Class="d-flex justify-center" Style="min-height: 100vh; width: 100vw;" Elevation="0">
	<MudPaper Width="70%" Square="true" Elevation="0">

		<MudPaper>
			<MudSelect T="int"
			Clearable="true"
			Label="Select genres"
			MultiSelection="true"
			SelectedValuesChanged="OnGenreSelectionChanged">
				@foreach (var genre in _genres)
				{
					<MudSelectItem Value="@genre.Id">@genre.Name</MudSelectItem>
				}
			</MudSelect>
		</MudPaper>
		<MudGrid>
			@foreach (var movie in _allMovies)
			{
				<MudItem xs="12" sm="6" md="4" lg="3">
					<MudPaper Class="d-flex align-center justify-center mud-width-full mt-7 movie-poster-container" Elevation="3">
						<div class="movie-rating">
							@if (movie.Rating != 0)
							{
								<h4>
									@String.Format("{0:.#}", movie.Rating) / 10
								</h4>
							}
							else
							{
								<p>Rating not found</p>
							}

						</div>
						<MudImage Class="movie-poster"
						Src="@GetImageUrl(movie.PosterPath)"
						Alt="Movie Poster"
						FallbackSrc="/Images/notfound.png">
						</MudImage>
						<div class="movie-description">
							<h3>@movie.Title</h3>

							@* Shortens the movie description if it's too long *@

							@if (@movie.Description.Length > 500)
							{
								<h4>@movie.Description.Substring(0,500) ...</h4>
							}
							else
							{
								<h4>@movie.Description</h4>
							}
						</div>
					</MudPaper>
				</MudItem>
			}
		</MudGrid>
	</MudPaper>
</MudPaper>

@code {
	private List<Movie> _allMovies = new();
	private List<Genre> _genres = new();
	private List<int> _selectedGenreIds = new();
	private Options options = new();

	private async Task OnGenreSelectionChanged(IEnumerable<int> newSelection)
	{
		_selectedGenreIds = newSelection.ToList();

		if (_selectedGenreIds.Count > 0)
		{
			_allMovies = await TMDB.GetMovieByGenreAsync(_selectedGenreIds);
		}
		else
		{
			_allMovies = await TMDB.GetTrendingMoviesAsync();
		}
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_genres = await TMDB.GetGenresAsync();
			_allMovies = await TMDB.GetTrendingMoviesAsync();
		}

		catch
		{
			Snackbar.Add($"Something went wrong when trying to retrieve the movies.", Severity.Error);
		}
	}

	private string GetImageUrl(string posterPath)
	{
		return string.IsNullOrWhiteSpace(posterPath)
		? ""
		: $"https://image.tmdb.org/t/p/w500{posterPath}";
	}

}