@using Services
@using Models
@using ChoosableOptions
@inject ITMDBService TMDB
@inject ISnackbar Snackbar
@page "/"

<PageTitle>Home</PageTitle>

<MudPaper Class="d-flex justify-center" Style="min-height: 100vh; width: 100vw;" Elevation="0">
	<MudPaper Width="70%" Square="true" Elevation="0">
		<MudPaper>


			<MudSelect T="List<int>" Label="Select genre" MultiSelection="true" @bind-Value="_selectedGenreIds">
				@foreach (var genre in options._genres)
				{
					<MudSelectItem T="string" Value="@genre">@genre</MudSelectItem>
				}
			</MudSelect>

		</MudPaper>
		<MudGrid>
			@foreach (var movie in allMovies)
			{
				<MudItem xs="12" sm="6" md="4" lg="3">
					<MudPaper Class="d-flex align-center justify-center mud-width-full mt-7 movie-poster-container" Elevation="3">
						<div class="movie-rating">
							@if (movie.Rating != 0)
							{
								<h4>
									@String.Format("{0:.#}", movie.Rating) / 10
								</h4>
							}
							else
							{
								<p>Rating not found</p>
							}

						</div>
						<MudImage Class="movie-poster"
								  Src="@GetImageUrl(movie.PosterPath)"
								  Alt="Movie Poster">
						</MudImage>
						<div class="movie-description">
							<h3>@movie.Title</h3>
							<h4>@movie.Overview</h4>
						</div>
					</MudPaper>
				</MudItem>
			}
		</MudGrid>
	</MudPaper>
</MudPaper>

@code {
	private List<Movie> allMovies = new();
	private Options options = new();

	private List<int> _selectedGenreIds = new();

	private async Task OnGenreSelectionChanged(IEnumerable<int> newSelection)
	{
		_selectedGenreIds = newSelection.ToList();

		if (_selectedGenreIds.Count > 0)
		{
			allMovies = await TMDB.GetMovieByGenreAsync(_selectedGenreIds);
		}
		else
		{
			allMovies = await TMDB.GetTrendingMoviesAsync();
		}
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			allMovies = await TMDB.GetTrendingMoviesAsync();
			StateHasChanged();
		}

		catch
		{
			Snackbar.Add($"Something went wrong when trying to retrieve the movies.", Severity.Error);
		}
	}

	private string GetImageUrl(string posterPath)
	{
		return $"https://image.tmdb.org/t/p/w500{posterPath}";
	}

}