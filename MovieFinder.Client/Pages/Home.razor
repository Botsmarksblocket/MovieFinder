@using Services
@using Models
@using ChoosableOptions
@inject ITMDBService TMDB
@inject ISnackbar Snackbar
@page "/"

<PageTitle>Home</PageTitle>

<MudPaper Class="d-flex justify-center" Style="min-height: 100vh; width: 100vw;" Elevation="0">
	<MudPaper Width="70%" Square="true" Elevation="0">

		<MudGrid>


			<MudItem xs="6">
				<MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
						   T="int"
						   Clearable="true"
						   Label="Genres"
						   MultiSelection="true"
						   Variant="Variant.Outlined"
						   SelectedValuesChanged="OnGenreSelectionChanged">
					@foreach (var genre in _genres)
					{
						<MudSelectItem Value="@genre.Id">@genre.Name</MudSelectItem>
					}
				</MudSelect>
			</MudItem>

			<MudItem xs="6">
				<MudSlider T="double"
						   Value="@_parameters.MinimumRating"
						   ValueChanged="OnMinimumRatingChanged"
						   Min="0"
						   Max="10"
						   Step="0.1"
						   Immediate="false"
						   Size="Size.Medium">
					Minimum rating: @_parameters.MinimumRating.ToString()
				</MudSlider>
			</MudItem>

			<MudItem xs="6">
				<MudSelect T="int"
						   Value="@_parameters.ReleaseYear"
						   ValueChanged="OnReleaseYearChanged"
						   Label="Release year"
						   Variant="Variant.Outlined"
						   Clearable="true">

					@for (int i = DateTime.Now.Year; i > 1900; i--)
					{
						var localVariable = i;
						<MudSelectItem Value="@i">
							@localVariable
						</MudSelectItem>
					}
				</MudSelect>
			</MudItem>

		</MudGrid>

		<MudGrid>
			@foreach (var movie in _allMovies)
			{
				<MudItem xs="12" sm="6" md="4" lg="3">
					<MudPaper Class="d-flex align-center justify-center mt-7 movie-poster-container" Elevation="3">
						<div class="movie-rating">
							@if (movie.Rating != 0)
							{
								<h4>
									@String.Format("{0:.#}", movie.Rating) / 10
								</h4>
							}

							else
							{
								<p>Rating not found</p>
							}

						</div>
						<MudImage Class="movie-poster"
								  Src="@GetImageUrl(movie.PosterPath)"
								  Alt="Movie Poster"
								  FallbackSrc="/Images/notfound.png">
						</MudImage>

						<div class="movie-description">
							<h3>@movie.Title</h3>

							@* Shortens the movie description if it's too long *@

							@if (@movie.Description.Length > 500)
							{
								<h4>@movie.Description.Substring(0, 500) ...</h4>
							}
							else
							{
								<h4>@movie.Description</h4>
							}
						</div>
					</MudPaper>
				</MudItem>
			}
		</MudGrid>
	</MudPaper>
</MudPaper>

@code {
	private List<Movie> _allMovies = new();
	private List<Genre> _genres = new();
	private Options _options = new();
	private QueryParameters _parameters = new();

	//Loads the genres and trending movies upon page initialization
	protected override async Task OnInitializedAsync()
	{
		try
		{
			_genres = await TMDB.GetGenresAsync();
			_allMovies = await TMDB.GetTrendingMoviesAsync();
		}

		catch
		{
			Snackbar.Add($"Something went wrong when trying to retrieve the movies.", Severity.Error);
		}
	}

	private async Task OnFilterChanged()
	{
		_allMovies = await TMDB.GetFilteredMoviesAsync(_parameters);
	}

	private async Task OnReleaseYearChanged(int releaseYear)
	{
		_parameters.ReleaseYear = releaseYear;
		await OnFilterChanged();
	}

	private async Task OnMinimumRatingChanged(double minimumRating)
	{
		_parameters.MinimumRating = minimumRating;
		await OnFilterChanged();
	}

	//Updates the movies displayed when choosing genres. If no genres are selected the trending movies gets shown instead
	private async Task OnGenreSelectionChanged(IEnumerable<int> newSelection)
	{
		_parameters.SelectedGenreIds = newSelection.ToList();
		await OnFilterChanged();
	}

	//Display logic for the multiselection text for genres
	private string GetMultiSelectionText(List<string> selectedValues)
	{
		int count = selectedValues.Count();

		if (count == 1)
		{
			return "1 genre selected";
		}
		else
		{
			return $"{count} genres selected";
		}
	}

	private string GetImageUrl(string posterPath)
	{
		return string.IsNullOrWhiteSpace(posterPath)
		? ""
		: $"https://image.tmdb.org/t/p/w500{posterPath}";
	}
}