@using Services
@using Models
@using Slugify
@inject ITMDBService TMDB
@inject ISnackbar Snackbar
@inject IJSRuntime JS

@page "/"

<PageTitle>Home</PageTitle>

<MudPaper Class="d-flex justify-center" Elevation="0">
	<MudPaper Width="75%" Square="true" Style="min-height: 100vh;" Elevation="0">
		<MudGrid>
			<MudItem xs="12" md="6">
				<MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
				T="int"
				Clearable="true"
				Label="Genres"
				MultiSelection="true"
				Variant="Variant.Outlined"
				SelectedValuesChanged="OnGenreSelectionChanged">
					@foreach (var genre in _genres)
					{
						<MudSelectItem Value="@genre.Id">@genre.Name</MudSelectItem>
					}
				</MudSelect>
			</MudItem>

			<MudItem xs="12" md="6">
				<MudSelect T="int"
				Value="@_parameters.ReleaseYear"
				ValueChanged="OnReleaseYearChanged"
				Label="Release year"
				Variant="Variant.Outlined">

					<MudSelectItem Value="0">None</MudSelectItem>
					@for (int i = DateTime.Now.Year; i > 1900; i--)
					{
						var localVariable = i;
						<MudSelectItem Value="@i">
							@localVariable
						</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
			<MudItem xs="12" md="6">
				<MudSelect T="string"
				Value="@_parameters.SortBy"
				ValueChanged="OnSortByChanged"
				Label="Sort by"
				Variant="Variant.Outlined">
					<MudSelectItem Value="@("None")">None</MudSelectItem>
					<MudSelectItem Value="@("vote_count.desc")">Most votes</MudSelectItem>
					<MudSelectItem Value="@("vote_count.asc")">Least votes (minimum 10)</MudSelectItem>
					<MudSelectItem Value="@("vote_average.desc")">Highest rating</MudSelectItem>
					<MudSelectItem Value="@("vote_average.asc")">Lowest rating</MudSelectItem>
				</MudSelect>
			</MudItem>

			<MudItem xs="12" md="6">
				<MudSlider T="double"
				Value="@_parameters.MinimumRating"
				ValueChanged="OnMinimumRatingChanged"
				Min="0"
				Max="10"
				Step="0.1"
				Immediate="false"
				Size="Size.Medium">
					Minimum rating: @_parameters.MinimumRating.ToString()
				</MudSlider>
			</MudItem>
		</MudGrid>

		<MudGrid>
			<MudItem xs="12" sm="6" md="4">
				<MudAutocomplete T="Movie"
				Label="Search movie"
				@bind-Value="_selectedMovie"
				SearchFunc="@SearchMovie"
				Variant="Variant.Outlined"
				ShowProgressIndicator="true"
				ToStringFunc="@(m => m?.Title)"
				ResetValueOnEmptyText="true">
					<ItemTemplate>
						<MudPaper Class="d-flex align-items-center p-2">

							<MudImage Style="width: 100px; margin-right: 10px;"
							Src="@GetImageUrl(context.PosterPath)"
							Alt="Movie Poster"
							FallbackSrc="/Images/notfound.png">
							</MudImage>
							<h4>@context.Title (@context.ReleaseDate)</h4>
						</MudPaper>
					</ItemTemplate>
				</MudAutocomplete>
			</MudItem>
		</MudGrid>

		<MudGrid>
			@foreach (var movie in _allMovies)
			{
				<MudItem xs="6" md="4" lg="3">
					<NavLink href="@GenerateUrl(movie.Id, movie.Title)">

						<MudPaper Class="d-flex align-center justify-center mt-7 movie-poster-container" Elevation="3">
							<div class="movie-rating">
								@if (movie.Rating != 0)
								{
									<h4>
										@String.Format("{0:.#}", movie.Rating) / 10 (@movie.VoteCount votes)
									</h4>
								}

								else
								{
									<p>Rating not found</p>
								}

							</div>

							@if (GetImageUrl(movie.PosterPath) == "")
							{
								<div class="not-found">
									<h3>@movie.Title</h3>
								</div>
							}
							else
							{
								<MudImage Class="movie-poster"
								Src="@GetImageUrl(movie.PosterPath)"
								Alt="Movie Poster"
								>
								</MudImage>
							}


							<div class="movie-description">
								<h3>@movie.Title</h3>

								<MudRating Class="mud-rating-item"
								SelectedValue="CalculateRating(movie.Rating)"
								ReadOnly="true" />

								@* Shortens the movie description if it's too long *@
								@if (@movie.Description.Length > 500)
								{
									<h4>@movie.Description.Substring(0, 500) ...</h4>
								}
								else
								{
									<h4>@movie.Description</h4>
								}
							</div>
						</MudPaper>
					</NavLink>

				</MudItem>
			}
		</MudGrid>
	</MudPaper>
</MudPaper>

@code {
	private SearchResult _searchResult;
	private int _currentPage = 1;
	private int _totalPages = 0;
	private bool _isLoading = false;

	private List<Movie> _allMovies = new();
	private Movie _selectedMovie;
	private List<Genre> _genres = new();
	private QueryParameters _parameters = new();
	SlugHelper slugHelper = new();

	private async Task<IEnumerable<Movie>> SearchMovie(string movieName, CancellationToken token)
	{
		return await TMDB.GetMovieAsync(movieName);
	}

	private async Task LoadMoviesAsync()
	{
		_parameters.Page = _currentPage;
		_searchResult = await TMDB.GetFilteredMoviesAsync(_parameters);
		_allMovies = _searchResult.Results;
		_totalPages = _totalPages = Math.Min(_searchResult.TotalPages, 500);
	}

	//Loads genres, trending movies and invokes JS upon page initialization
	protected override async Task OnInitializedAsync()
	{
		try
		{
			await JS.InvokeVoidAsync("scrollHelper.registerScroll", DotNetObjectReference.Create(this));
			_genres = await TMDB.GetGenresAsync();
			await LoadMoviesAsync();
		}

		catch
		{
			Snackbar.Add($"Something went wrong when trying to retrieve the movies.", Severity.Error);
		}
	}

	private async Task LoadMoreMovies()
	{
		_currentPage++;
		_isLoading = true;
		_parameters.Page = _currentPage;
		var result = await TMDB.GetFilteredMoviesAsync(_parameters);

		if (result?.Results != null)
		{
			_allMovies.AddRange(result.Results);
			_totalPages = Math.Min(result.TotalPages, 500);
		}

		_isLoading = false;
		StateHasChanged();
	}

	[JSInvokable]
	public async Task OnScrollNearBottom()
	{
		if (_isLoading || _currentPage > _totalPages || _currentPage > 500)
			return;

		await LoadMoreMovies();
	}

	private async Task OnFilterChanged()
	{
		await LoadMoviesAsync();
	}

	private async Task OnSortByChanged(string sortBy)
	{
		_parameters.SortBy = sortBy;
		await OnFilterChanged();
	}

	private async Task OnReleaseYearChanged(int releaseYear)
	{
		_parameters.ReleaseYear = releaseYear;
		await OnFilterChanged();
	}

	private async Task OnMinimumRatingChanged(double minimumRating)
	{
		_parameters.MinimumRating = minimumRating;
		await OnFilterChanged();
	}

	//Updates the movies displayed when choosing genres. If no genres are selected the trending movies gets shown instead
	private async Task OnGenreSelectionChanged(IEnumerable<int> newSelection)
	{
		_parameters.GenreIds = newSelection.ToList();
		await OnFilterChanged();
	}

	// Rounds a movies double rating (0 - 10) to an integer on a (0 - 5 ) scale
	private int CalculateRating(double rating)
	{
		int calculatedRating;
		if (rating != 0)
		{
			rating = rating / 2;
			calculatedRating = (int)Math.Round(rating);
			return calculatedRating;
		}
		return 0;
	}

	//Display logic for the multiselection text for genres
	private string GetMultiSelectionText(List<string> selectedValues)
	{
		int count = selectedValues.Count();

		if (count == 1)
		{
			return "1 genre selected";
		}
		else
		{
			return $"{count} genres selected";
		}
	}

	private string GetImageUrl(string posterPath)
	{
		return string.IsNullOrWhiteSpace(posterPath)
		? ""
		: $"https://image.tmdb.org/t/p/w500{posterPath}";
	}

	//Generates a valid url for a specific movie using the Slugify library
	private string GenerateUrl(int id, string movieTitle)
	{
		return $"/movie/{id}/{slugHelper.GenerateSlug(movieTitle)}";
	}
}