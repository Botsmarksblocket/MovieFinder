﻿@using Services
@using Models
@using MovieFinder.Client.Models.Movies
@using MovieFinder.Client.Models.Shared
@using MovieFinder.Client.Components
@using Slugify
@inject ITMDBService TMDB
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@implements IDisposable

@page "/"

<PageTitle>Movie finder</PageTitle>

<MudScrollToTop>
	<MudFab Style="background-color: rgb(59, 130, 246)"
			StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
</MudScrollToTop>

<MudPaper Class="d-flex justify-center" Elevation="0">
	<MudPaper Width="75%" Style="min-height: 100vh;" Elevation="0" Class="mt-6">
		<MudGrid>
			<MudItem xs="6" md="6">
				<MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
						   T="int"
						   Clearable="true"
						   Label="Genres"
						   MultiSelection="true"
						   Variant="Variant.Outlined"
						   SelectedValuesChanged="OnGenreSelectionChanged">
					@foreach (var genre in _genres)
					{
						<MudSelectItem Value="@genre.Id">@genre.Name</MudSelectItem>
					}
				</MudSelect>
			</MudItem>

			<MudItem xs="12" md="6">
				<MudSelect T="int"
						   Value="@_parameters.ReleaseYear"
						   ValueChanged="OnReleaseYearChanged"
						   Label="Release year"
						   Variant="Variant.Outlined">

					<MudSelectItem Value="0">None</MudSelectItem>
					@for (int i = DateTime.Now.Year; i > 1900; i--)
					{
						var localVariable = i;
						<MudSelectItem Value="@i">
							@localVariable
						</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
			<MudItem xs="12" md="6">
				<MudSelect T="string"
						   Value="@_parameters.SortBy"
						   ValueChanged="OnSortByChanged"
						   Label="Sort by"
						   Variant="Variant.Outlined">
					<MudSelectItem Value="@("None")">None</MudSelectItem>
					<MudSelectItem Value="@("vote_count.desc")">Most votes</MudSelectItem>
					<MudSelectItem Value="@("vote_count.asc")">Least votes (minimum 10)</MudSelectItem>
					<MudSelectItem Value="@("vote_average.desc")">Highest rating</MudSelectItem>
					<MudSelectItem Value="@("vote_average.asc")">Lowest rating</MudSelectItem>
				</MudSelect>
			</MudItem>

			<MudItem xs="12" md="6">
				<MudSlider T="double"
						   Value="@_parameters.MinimumRating"
						   ValueChanged="OnMinimumRatingChanged"
						   Min="0"
						   Max="10"
						   Step="0.1"
						   Immediate="false"
						   Size="Size.Medium">
					Minimum rating: @_parameters.MinimumRating.ToString()
				</MudSlider>
			</MudItem>
		</MudGrid>

		<MudGrid>
			@foreach (var movie in _allMovies)
			{
				<MovieComponent @key=movie.Id Movie="movie" />
			}
		</MudGrid>
	</MudPaper>
</MudPaper>

@code {
	private SearchResult _searchResult;
	private List<Movie> _allMovies = new();
	private List<Genre> _genres = new();
	private FilterParameter _parameters = new();
	private SlugHelper _slugHelper = new();

	private DotNetObjectReference<HomePage> _dotNetRef;

	private bool _isLoading = false;

	//Loads genres, trending movies and invokes JS upon page initialization
	protected override async Task OnInitializedAsync()
	{
		try
		{
			_dotNetRef = DotNetObjectReference.Create(this);
			await JS.InvokeVoidAsync("scrollHelper.registerScroll", _dotNetRef);
			_genres = await TMDB.GetGenresAsync();
			await LoadMoviesAsync();
		}

		catch
		{
			Snackbar.Add($"Something went wrong when trying to retrieve the movies.", Severity.Error);
		}
	}

	//Cleans up resources by removin js scroll even listener and disposes the .NET object reference to prevent memory leaks
	public void Dispose()
	{
		JS.InvokeVoidAsync("scrollHelper.removeScroll");
		_dotNetRef?.Dispose();
	}

	//Resets the page parameters and load the movies with the filter parameters
	private async Task LoadMoviesAsync()
	{
		_parameters.Page = 1;
		_searchResult = await TMDB.GetFilteredMoviesAsync(_parameters);
		_allMovies = _searchResult.Results;
	}

	//If results were returned successfully, add them to the movie list
	private async Task LoadMoreMovies()
	{
		_isLoading = true;
		_parameters.Page++;
		var result = await TMDB.GetFilteredMoviesAsync(_parameters);

		if (result.Results != null)
		{
			_allMovies.AddRange(result.Results);
		}

		_isLoading = false;
		StateHasChanged();
	}

	[JSInvokable]
	public async Task OnScrollNearBottom()
	{
		if (_isLoading || _parameters.Page > 500)
			return;

		await LoadMoreMovies();
	}

	private async Task OnSortByChanged(string sortBy)
	{
		_parameters.SortBy = sortBy;
		await LoadMoviesAsync();
	}

	private async Task OnReleaseYearChanged(int releaseYear)
	{
		_parameters.ReleaseYear = releaseYear;
		await LoadMoviesAsync();
	}

	private async Task OnMinimumRatingChanged(double minimumRating)
	{
		_parameters.MinimumRating = minimumRating;
		await LoadMoviesAsync();
	}

	//Updates the movies displayed when choosing genres. If no genres are selected the trending movies gets shown instead
	private async Task OnGenreSelectionChanged(IEnumerable<int> newSelection)
	{
		_parameters.GenreIds = newSelection.ToList();
		await LoadMoviesAsync();
	}

	// Rounds a movies double rating (0 - 10) to an integer on a (0 - 5 ) scale
	private int CalculateRating(double rating)
	{
		int calculatedRating;
		if (rating != 0)
		{
			rating = rating / 2;
			calculatedRating = (int)Math.Round(rating);
			return calculatedRating;
		}
		return 0;
	}

	//Display logic for the multiselection text for genres
	private string GetMultiSelectionText(List<string> selectedValues)
	{
		var genreNames = _genres
			.Where(g => selectedValues.Contains(g.Id.ToString()))
			.Select(g => g.Name)
			.ToList();


		if (genreNames.Count == 1)
		{
			return genreNames[0];
		}
		else if (genreNames.Count > 1)
		{
			return string.Join(" | ", genreNames) + " | ";
		}
		else
		{
			return "No genres selected";
		}
	}

	private string GetPosterUrl(string posterPath)
	{
		return string.IsNullOrWhiteSpace(posterPath)
		? ""
		: $"https://image.tmdb.org/t/p/w780{posterPath}";
	}

	//Generates a valid url for a specific movie using the Slugify library
	private string GenerateMovieUrl(int id, string movieTitle)
	{
		return $"/movie/{id}/{_slugHelper.GenerateSlug(movieTitle)}";
	}
}