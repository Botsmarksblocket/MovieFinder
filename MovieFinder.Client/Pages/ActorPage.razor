@using Services
@using Models
@using Slugify
@using MovieFinder.Client.Models.Movies
@using MovieFinder.Client.Models.Actors
@using MovieFinder.Client.Models.Shared
@inject ITMDBService TMDB
@page "/actor/{id:int}/{slug}"

<PageTitle>@_actor.Name</PageTitle>
<div class="color-wrapper">
	<MudPaper Class="d-flex justify-center" Elevation="0">
		<MudPaper Width="75%" Style="min-height: 100vh; background-color:white;" Elevation="0" Class="mt-20">
			<MudGrid Class="mt-4" Justify="Justify.Center">
				<MudItem xs="12" md="3">
					<div class="center-xs d-flex justify-center">
						<MudImage Objectfit="ObjectFit.Cover"
								  Class="actor-portrait actor-portrait-actorpage portrait-offset-up"
								  Src="@GetActorPosterUrl(_actor.ProfilePicture)"
								  FallbackSrc="Images/noprofile.png" />
					</div>
				</MudItem>
				<MudItem xs="12" md="9">
					<MudStack Class="center-xs mx-3">
						<MudText Typo="Typo.h4">
							<b>
								@_actor.Name
								@switch (_actor.Gender)
								{
									case (int)Gender.Female:
										<MudIcon Style="color:red;" Size="Size.Large" Icon="@Icons.Material.Filled.Female" Title="Female" />
										break;
									case (int)Gender.Male:
										<MudIcon Icon="@Icons.Material.Filled.Male" Title="Male" />
										break;
									case (int)Gender.NonBinary:
										break;
								}
							</b>
						</MudText>
						<MudStack Class="center-xs small-font-xs width-xs" Row="true" Wrap="Wrap.Wrap">
							@if (!string.IsNullOrEmpty(_actor.PlaceOfBirth))
							{
								<MudText Typo="Typo.h6">Born in @_actor.PlaceOfBirth.</MudText>
							}

							@if (!string.IsNullOrEmpty(_actor.Birthday))
							{
								<MudText Typo="Typo.h6">@GetAge(_actor.Birthday) years old.</MudText>
							}

						</MudStack>

						@if (string.IsNullOrEmpty(_actor.Biography))
						{
							<MudText Typo="Typo.h6">No actor description available</MudText>
						}
						else
						{
							<MudStack Class="center-xs width-xs">
								<div class="small-font-xs-description">
									<MudText Typo="Typo.body1">
										@Biography
										@if (_actor.Biography.Length > 300)
										{
											<MudText Color="Color.Primary" Class="ml-1 cursor-pointer d-inline" @onclick="@(() => showFullBiography = !showFullBiography)">
												@ToggleText
											</MudText>
										}
									</MudText>
								</div>
							</MudStack>
						}
					</MudStack>
				</MudItem>
			</MudGrid>

			<div class="d-flex justify-center mt-8 mr-2 ml-2">
				<MudPaper Class="width-xs" Style="width: 100%; height: 600px; background-color:beige;" Elevation="0">
					<MudStack>
						<MudStack>
							<MudToggleGroup T="string"
											SelectionMode="SelectionMode.SingleSelection"
											Color="Color.Primary"
											FixedContent
											Style="display: flex; justify-content: start; background-color:white;">
								<MudToggleItem Value="@("Photos")" Text="Photos" />
								<MudToggleItem Value="@("ActedIn")" Text="Acted in" />
							</MudToggleGroup>

							<MudPagination>

							</MudPagination>
						</MudStack>
					</MudStack>


				</MudPaper>
			</div>

		</MudPaper>
	</MudPaper>
</div>
@code {

	[Parameter]
	public int Id { get; set; }
	[Parameter]
	public string Slug { get; set; }
	private ActorDetail _actor = new ActorDetail();

	private bool showFullBiography = false;

	private string Biography
	{
		get
		{
			int previewLimit = 300;

			if (string.IsNullOrEmpty(_actor.Biography))
			{
				return "";
			}

			if (showFullBiography || _actor.Biography.Length <= previewLimit)
			{
				return _actor.Biography;
			}
			else
			{
				return _actor.Biography.Substring(0, previewLimit) + "...";
			}

		}
	}

	private string ToggleText => showFullBiography ? "Show less" : "Show more";

	private string GetActorPosterUrl(string posterPath)
	{
		return string.IsNullOrWhiteSpace(posterPath)
		? ""
		: $"https://image.tmdb.org/t/p/original{posterPath}";
	}

	protected override async Task OnParametersSetAsync()
	{
		_actor = await TMDB.GetActorDetailsAsync(Id);
	}

	private int GetAge(string unconvertedBirthDate)
	{
		DateTime birthDate = Convert.ToDateTime(unconvertedBirthDate);
		var today = DateTime.Today;
		var age = today.Year - birthDate.Year;

		if (birthDate.Date > today.AddYears(-age))
		{
			age--;
		}
		return age;
	}

	public enum Gender
	{
		Unknown = 0,
		Female = 1,
		Male = 2,
		NonBinary = 3
	}
}
