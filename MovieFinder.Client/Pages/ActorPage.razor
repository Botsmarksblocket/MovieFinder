@using Services
@using Models
@using Slugify
@inject ITMDBService TMDB
@page "/actor/{id:int}/{slug}"

<PageTitle>@_actor.Name</PageTitle>
<div class="color-wrapper">
	<MudPaper Class="d-flex justify-center" Elevation="0">
		<MudPaper Width="75%" Style="min-height: 100vh; background-color:white;" Elevation="0" Class="mt-6">
			<MudGrid Class="mt-4" Justify="Justify.Center">
				<MudItem xs="12" md="3">
					<div class="center-xs d-flex justify-center">
						<MudImage Objectfit="ObjectFit.Cover"
								  Class="actor-portrait actor-portrait-actorpage "
								  Src="@GetActorPosterUrl(_actor.ProfilePicture)"
								  FallbackSrc="Images/noprofile.png" />
					</div>
				</MudItem>
				<MudItem xs="12" md="9">
					<MudStack Class="center-xs mt-4 small-font-xs">
						<MudText Typo="Typo.h4"><b>@_actor.Name</b></MudText>
						<MudStack Class="center-xs" Row="true" Wrap="Wrap.Wrap">
							@switch (_actor.Gender)
							{
								case (int)Gender.Female:
									<MudIcon Style="color:red;" Icon="@Icons.Material.Filled.Female" Title="Female" />
									break;
								case (int)Gender.Male:
									<MudIcon Icon="@Icons.Material.Filled.Male" Title="Male" />
									break;
								case (int)Gender.NonBinary:
									<MudText>Non-binary</MudText>
									break;
							}

							@if (!string.IsNullOrEmpty(_actor.Birthday))
							{
								<MudText Typo="Typo.h6">@GetAge(_actor.Birthday) years</MudText>
							}
							<MudText Typo="Typo.h6">@_actor.Department</MudText>
							<MudText Typo="Typo.h6">Born in: @_actor.PlaceOfBirth</MudText>
						</MudStack>
@* 						<MudStack>
							<MudText>@_actor.Biography</MudText>
						</MudStack> *@
					</MudStack>
				</MudItem>
			</MudGrid>

		</MudPaper>
	</MudPaper>
</div>
@code {
	[Parameter]
	public int Id { get; set; }
	[Parameter]
	public string Slug { get; set; }
	private ActorDetail _actor = new ActorDetail();

	private string GetActorPosterUrl(string posterPath)
	{
		return string.IsNullOrWhiteSpace(posterPath)
		? ""
		: $"https://image.tmdb.org/t/p/original{posterPath}";
	}

	protected override async Task OnParametersSetAsync()
	{
		_actor = await TMDB.GetActorDetailsAsync(Id);
	}

	private int GetAge(string unconvertedBirthDate)
	{
		DateTime birthDate = Convert.ToDateTime(unconvertedBirthDate);
		var today = DateTime.Today;
		var age = today.Year - birthDate.Year;

		if (birthDate.Date > today.AddYears(-age))
		{
			age--;
		}
		return age;
	}


	public enum Gender
	{
		Unknown = 0,
		Female = 1,
		Male = 2,
		NonBinary = 3
	}
}
