@using Services
@using MovieFinder.Shared.Models
@using Slugify
@inject IDialogService DialogService
@using MovieFinder.Client.Dialogs
@using MovieFinder.Shared.Models.Movies
@using MovieFinder.Shared.Models.Actors
@using MovieFinder.Shared.Models.Common
@using MovieFinder.Client.Components
@inject ISnackbar Snackbar
@inject IMovieApiService TMDB
@page "/actor/{id:int}/{slug}"

<PageTitle>@_actor.Name</PageTitle>

@if (_isLoading)
{
	<div class="d-flex justify-center align-center" style="height: 100vh;">
		<MudProgressCircular Color="Color.Primary" Rounded="true" Style="height:100px;width:100px;" Indeterminate="true" />
	</div>
}

else
{
	<MudPaper Class="d-flex justify-center" Style="min-height: 100vh;" Elevation="0">
		<MudPaper Style="background-color:white;" Elevation="0" Class="mt-20 container-width">
			<MudGrid Class="mt-4" Justify="Justify.Center">
				<MudItem xs="12" md="3">
					<div class="center-xs d-flex justify-center">
						<MudImage Objectfit="ObjectFit.Cover"
								  Class="actor-portrait actor-portrait-actorpage portrait-offset-up"
								  Src="@GetImageUrl("original",_actor.ProfilePicture)"
								  FallbackSrc="Images/noprofile.png" />
					</div>
				</MudItem>
				<MudItem xs="12" md="9">
					<MudStack Class="center-xs mx-3">
						<MudText Typo="Typo.h4" Style="color: rgba(0,0,0,0.85);">
							<b>
								@_actor.Name
								@switch (_actor.Gender)
								{
									case (int)Gender.Female:
										<MudIcon Style="color:#ec49a6;" Size="Size.Large" Icon="@Icons.Material.Filled.Female" Title="Female" />
										break;
									case (int)Gender.Male:
										<MudIcon Style="color:#02a3fe;" Icon="@Icons.Material.Filled.Male" Title="Male" />
										break;
									case (int)Gender.NonBinary:
										break;
								}
							</b>
						</MudText>
						<div class="color-wrapper">
							<MudStack Class="center-xs small-font-xs width-xs" Row="true" Wrap="Wrap.Wrap">
								@if (!string.IsNullOrEmpty(_actor.PlaceOfBirth))
								{
									<MudText Typo="Typo.h6"> <b>Born in @_actor.PlaceOfBirth. </b></MudText>
								}

								@if (!string.IsNullOrEmpty(_actor.Birthday))
								{
									<MudText Typo="Typo.h6"> <b>@GetAge(_actor.Birthday) years old. </b></MudText>
								}

							</MudStack>

							@if (string.IsNullOrEmpty(_actor.Biography))
							{
								<MudText Typo="Typo.h6"><b>No actor description available.</b></MudText>
							}
							else
							{
								<MudStack Class="center-xs width-xs">
									<div class="small-font-xs-description">
										<MudText Typo="Typo.body1">
											@Biography
											@if (_actor.Biography.Length > 300)
											{
												<MudText Color="Color.Primary" Class="ml-1 cursor-pointer d-inline" @onclick="@(() => showFullBiography = !showFullBiography)">
													@ToggleText
												</MudText>
											}
										</MudText>
									</div>
								</MudStack>
							}
						</div>
					</MudStack>
				</MudItem>
			</MudGrid>

			<div class="d-flex justify-center mt-8 mx-4">
				<MudPaper Class="width-lg width-xs" Style="height: 100%; width: 100%; background-color:white;" Elevation="0">
					<MudStack Class="center-xs">
						<MudStack Style="max-width: 200px">
							<MudToggleGroup T="string"
											Delimiters="true"
											Size=Size.Small
											Value="_activeTab"
											ValueChanged="OnTabChanged"
											SelectionMode="SelectionMode.SingleSelection"
											Color="Color.Primary"
											FixedContent
											Outlined="true"
											Style="max-width-full">
								<MudToggleItem Value="@("ActorPhotos")" Text="Photos" />
								<MudToggleItem Value="@("ActedIn")" Text="Acted in" />
							</MudToggleGroup>
						</MudStack>
					</MudStack>

					<MudDivider DividerType="DividerType.Middle" Class="mt-4 mb-2"></MudDivider>

					<div class="d-flex justify-center mt-2 mb-2">
						<MudPagination @bind-Selected="@_selected"
									   BoundaryCount="1"
									   MiddleCount="2"
									   Size="Size.Small"
									   Count="@CalculateTotalPages()"
									   Variant="Variant.Text" />
					</div>

					@if (_activeTab == "ActorPhotos")
					{
						@if (!_actor.Images.Profiles.Any())
						{
							<div class="d-flex justify-center align-center flex-column">
								<MudIcon Icon="@Icons.Material.Outlined.SearchOff" Size="Size.Large" Color="Color.Error" Title="Not found" />
								<MudText>No photos found</MudText>
							</div>
						}

						else
						{
							<MudGrid Spacing="6">
								@foreach (var actor in GetPage(_actor.Images.Profiles))
								{
									<MudItem xs="6" md="3" lg="2" Class="center-xs">
										<MudImage Class="image-container image rounded-lg mb-2"
												  Src="@GetImageUrl("w780", actor.FilePath)"
												  FallbackSrc="Images/notfound.png"
												  @onclick="() => OpenDialogAsync(actor.FilePath)" />
									</MudItem>
								}
							</MudGrid>
						}
					}

					else if (_activeTab == "ActedIn")
					{
						@if (!_actor.MovieCredits.Cast.Any())
						{
							<div class="d-flex justify-center align-center flex-column">
								<MudIcon Icon="@Icons.Material.Outlined.SearchOff" Size="Size.Large" Color="Color.Error" Title="Not found" />
								<MudText>No movies found</MudText>
							</div>
						}

						else
						{
							<MudGrid Spacing="6">
								@foreach (var movie in GetPage(_actor.MovieCredits.Cast))
								{
									<MovieComponent @key="movie.Id" Movie="movie" />
								}
							</MudGrid>
						}
					}
				</MudPaper>
			</div>
		</MudPaper>
	</MudPaper>
}
@code {
	[Parameter]
	public int Id { get; set; }
	[Parameter]
	public string Slug { get; set; }

	private SlugHelper _slugHelper = new();

	private bool _isLoading;

	private void OpenDialogAsync(string filePath)
	{
		var options = new DialogOptions { BackgroundClass = "dialog-blur" };

		var parameters = new DialogParameters
		{
			{ "ImageSrc", GetImageUrl("original", filePath) }
		};

		DialogService.ShowAsync<ImageDialog>("Actor Image", parameters, options);
	}

	private ActorDetail _actor = new ActorDetail()
	{
		MovieCredits = new MovieCredit
		{
			Cast = new List<Movie>(),
		},
		Images = new ActorImages
		{
			Profiles = new List<ActorImage>()
		}
	};

	protected override async Task OnParametersSetAsync()
	{
		_isLoading = true;

		var result = await TMDB.GetActorDetailsAsync(Id);

		_actor = result ?? new ActorDetail
		{
			MovieCredits = new MovieCredit
			{
				Cast = new List<Movie>(),
			},
			Images = new ActorImages
			{
				Profiles = new List<ActorImage>()
			},
			Biography = "",
			Name = "Unknown Actor",
			ProfilePicture = ""
		}; 

		if (result == null)
		{
			Snackbar.Add("Unable to retrieve actor details. Please try again later.", Severity.Error);
		}
		
		_pageCount = CalculateTotalPages();

		_isLoading = false;
	}

	private int _selected = 1;
	private int _pageCount;
	private string _activeTab = "ActorPhotos";

	private void OnTabChanged(string newValue)
	{
		_activeTab = newValue;
		_selected = 1;
	}

	// Returns a paginated subset of the provided images.
	// Generic so it works for any collection type
	private IEnumerable<T> GetPage<T>(IEnumerable<T> items)
	{
		int pageSize = 12;

		return items
			.Skip((_selected - 1) * pageSize)
			.Take(pageSize)
			.ToList();
	}

	//Calculates total number of pages based on the active tab
	public int CalculateTotalPages()
	{
		int totalItems = 0;

		if (_activeTab == "ActorPhotos")
		{
			totalItems = _actor.Images.Profiles.Count();
		}
		else if (_activeTab == "ActedIn")
		{
			totalItems = _actor.MovieCredits.Cast.Count();
		}
		double rawPageCount = totalItems / 12.0;
		int totalPages = (int)Math.Ceiling(rawPageCount);

		return totalPages;
	}

	private bool showFullBiography = false;

	private string Biography
	{
		get
		{
			int previewLimit = 300;

			if (string.IsNullOrEmpty(_actor.Biography))
			{
				return "";
			}

			if (showFullBiography || _actor.Biography.Length <= previewLimit)
			{
				return _actor.Biography;
			}
			else
			{
				return _actor.Biography.Substring(0, previewLimit) + "...";
			}

		}
	}

	private string ToggleText => showFullBiography ? "Show less" : "Show more";

	private string GetImageUrl(string fileSize, string imagePath)
	{
		return string.IsNullOrWhiteSpace(imagePath)
		? ""
		: $"https://image.tmdb.org/t/p/{fileSize}{imagePath}";
	}

	private int GetAge(string unconvertedBirthDate)
	{
		DateTime birthDate = Convert.ToDateTime(unconvertedBirthDate);
		var today = DateTime.Today;
		var age = today.Year - birthDate.Year;

		if (birthDate.Date > today.AddYears(-age))
		{
			age--;
		}
		return age;
	}

	public enum Gender
	{
		Unknown = 0,
		Female = 1,
		Male = 2,
		NonBinary = 3
	}
}
